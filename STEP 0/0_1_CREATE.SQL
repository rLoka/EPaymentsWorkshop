--Creates tables and other DDL
CREATE TABLE  "GENERATE_EPAY_TRANSCATIONS"
   (    
    "RN" NUMBER,
    "SB" VARCHAR2(50),
    "DB" VARCHAR2(50),
    "PAY" NUMBER
   )
/
CREATE TABLE  "PF_ACK_INBOX"
   (    
    "PO_ID" NUMBER NOT NULL ENABLE,
    "SB_ACCOUNT_ID" VARCHAR2(50),
    "SB_BANK_ID" VARCHAR2(50),
    "DB_ACCOUNT_ID" VARCHAR2(50),
    "DB_BANK_ID" VARCHAR2(50),
    "PO_AMOUNT" NUMBER,
    "PO_PURPOSE" VARCHAR2(50),
    "PO_SB_MESSAGE" VARCHAR2(50),
    "PO_SB_DATE" VARCHAR2(50),
    "PO_SB_TIME" VARCHAR2(50),
    "PO_ACK_CLR_MESSAGE" VARCHAR2(50),
    "PO_ACK_CLR_DATE" VARCHAR2(50),
    "PO_ACK_CLR_TIME" VARCHAR2(50),
    "PO_ACK_DB_MESSAGE" VARCHAR2(50),
    "PO_ACK_DB_DATE" VARCHAR2(50),
    "PO_ACK_DB_TIME" VARCHAR2(50),
    "IN_DATE" VARCHAR2(50),
    "IN_TIME" VARCHAR2(50),
    "MESSAGE_TYPE" VARCHAR2(100)
   )
/
CREATE TABLE  "PF_ACK_OUTBOX"
   (    
    "PO_ID" NUMBER NOT NULL ENABLE,
    "SB_ACCOUNT_ID" VARCHAR2(50),
    "SB_BANK_ID" VARCHAR2(50),
    "DB_ACCOUNT_ID" VARCHAR2(50),
    "DB_BANK_ID" VARCHAR2(50),
    "PO_AMOUNT" NUMBER,
    "PO_PURPOSE" VARCHAR2(50),
    "PO_SB_MESSAGE" VARCHAR2(50),
    "PO_SB_DATE" VARCHAR2(50),
    "PO_SB_TIME" VARCHAR2(50),
    "PO_ACK_CLR_MESSAGE" VARCHAR2(50),
    "PO_ACK_CLR_DATE" VARCHAR2(50),
    "PO_ACK_CLR_TIME" VARCHAR2(50),
    "PO_ACK_DB_MESSAGE" VARCHAR2(50),
    "PO_ACK_DB_DATE" VARCHAR2(50),
    "PO_ACK_DB_TIME" VARCHAR2(50),
    "IN_DATE" VARCHAR2(50),
    "IN_TIME" VARCHAR2(50),
    "MESSAGE_TYPE" VARCHAR2(100)
   )
/
CREATE TABLE  "PF_BANKACCOUNTS_BALANCE"
   (    
    "ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    "ACCOUNT_ID" VARCHAR2(50),
    "BANK_ID" VARCHAR2(50),
    "CUSTOMER_ID" VARCHAR2(50),
    "BALANCE_DATE" VARCHAR2(50),
    "BALANCE_TIME" NUMBER,
    "BALANCE" NUMBER,
    CONSTRAINT "PF_BANKACCOUNTS_BALANCE_PK" PRIMARY KEY ("ID") ENABLE
   )
/
CREATE TABLE  "PF_BANKACCOUNTS_INIT"
   (    
    "ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    "ACCOUNT_ID" VARCHAR2(50),
    "BANK_ID" VARCHAR2(50),
    "CUSTOMER_ID" VARCHAR2(50),
    "INIT_DATE" VARCHAR2(50),
    "INIT_TIME" VARCHAR2(50),
    "AMOUNT" NUMBER,
    CONSTRAINT "PF_BANKACCOUNTS_INIT_PK" PRIMARY KEY ("ID") ENABLE
   )
/
CREATE TABLE  "PF_BANKACCOUNTS_TRANSACTIONS"
   (    
    "PO_ID" NUMBER NOT NULL ENABLE,
    "ACCOUNT_ID" VARCHAR2(50),
    "BANK_ID" VARCHAR2(50),
    "TRANSACTION_DATE" VARCHAR2(50),
    "TRANSACTION_TIME" VARCHAR2(50),
    "TRANSACTION_PURPOSE" VARCHAR2(50),
    "TRANSACTION_AMOUNT" NUMBER
   )
/
CREATE TABLE  "PF_LOG"
   (    
    "ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    "LOG_DATE" VARCHAR2(10),
    "LOGTIME" VARCHAR2(10),
    "LOG_USER" VARCHAR2(250),
    "LOG_ACTION" VARCHAR2(1000),
    "LOG_COMMENT" VARCHAR2(4000),
     CONSTRAINT "PF_LOG_PK" PRIMARY KEY ("ID") ENABLE
   )
/
CREATE TABLE  "PF_MEMBERBANKS"
   (    
    "BANK_ID" VARCHAR2(50),
    "TEAM_INFO" VARCHAR2(1000)
   )
/
CREATE TABLE  "PF_MEMBERBANKS_SHADOW"
   (    
    "BANK_ID" VARCHAR2(50),
    "TEAM_INFO" VARCHAR2(1000)
   )
/
CREATE TABLE  "PF_PO_FAILED"
   (    
    "PO_ID" NUMBER NOT NULL ENABLE,
    "SB_ACCOUNT_ID" VARCHAR2(50),
    "SB_BANK_ID" VARCHAR2(50),
    "DB_ACCOUNT_ID" VARCHAR2(50),
    "DB_BANK_ID" VARCHAR2(50),
    "PO_AMOUNT" NUMBER,
    "PO_PURPOSE" VARCHAR2(50),
    "PO_SB_MESSAGE" VARCHAR2(50),
    "PO_SB_DATE" VARCHAR2(50),
    "PO_SB_TIME" VARCHAR2(50),
    "PO_ACK_CLR_MESSAGE" VARCHAR2(50),
    "PO_ACK_CLR_DATE" VARCHAR2(50),
    "PO_ACK_CLR_TIME" VARCHAR2(50),
    "PO_ACK_DB_MESSAGE" VARCHAR2(50),
    "PO_ACK_DB_DATE" VARCHAR2(50),
    "PO_ACK_DB_TIME" VARCHAR2(50),
    "IN_DATE" VARCHAR2(50),
    "IN_TIME" VARCHAR2(50),
    "MESSAGE_TYPE" VARCHAR2(100)
   )
/
CREATE TABLE  "PF_PO_INBOX"
   (    
    "PO_ID" NUMBER NOT NULL ENABLE,
    "SB_ACCOUNT_ID" VARCHAR2(50),
    "SB_BANK_ID" VARCHAR2(50),
    "DB_ACCOUNT_ID" VARCHAR2(50),
    "DB_BANK_ID" VARCHAR2(50),
    "PO_AMOUNT" NUMBER,
    "PO_PURPOSE" VARCHAR2(50),
    "PO_SB_MESSAGE" VARCHAR2(50),
    "PO_SB_DATE" VARCHAR2(50),
    "PO_SB_TIME" VARCHAR2(50),
    "PO_ACK_CLR_MESSAGE" VARCHAR2(50),
    "PO_ACK_CLR_DATE" VARCHAR2(50),
    "PO_ACK_CLR_TIME" VARCHAR2(50),
    "PO_ACK_DB_MESSAGE" VARCHAR2(50),
    "PO_ACK_DB_DATE" VARCHAR2(50),
    "PO_ACK_DB_TIME" VARCHAR2(50),
    "IN_DATE" VARCHAR2(50),
    "IN_TIME" VARCHAR2(50),
    "MESSAGE_TYPE" VARCHAR2(100)
   )
/
CREATE TABLE  "PF_PO_OUTBOX"
   (    
    "PO_ID" NUMBER NOT NULL ENABLE,
    "SB_ACCOUNT_ID" VARCHAR2(50),
    "SB_BANK_ID" VARCHAR2(50),
    "DB_ACCOUNT_ID" VARCHAR2(50),
    "DB_BANK_ID" VARCHAR2(50),
    "PO_AMOUNT" NUMBER,
    "PO_PURPOSE" VARCHAR2(50),
    "PO_SB_MESSAGE" VARCHAR2(50),
    "PO_SB_DATE" VARCHAR2(50),
    "PO_SB_TIME" VARCHAR2(50),
    "PO_ACK_CLR_MESSAGE" VARCHAR2(50),
    "PO_ACK_CLR_DATE" VARCHAR2(50),
    "PO_ACK_CLR_TIME" VARCHAR2(50),
    "PO_ACK_DB_MESSAGE" VARCHAR2(50),
    "PO_ACK_DB_DATE" VARCHAR2(50),
    "PO_ACK_DB_TIME" VARCHAR2(50),
    "IN_DATE" VARCHAR2(50),
    "IN_TIME" VARCHAR2(50),
    "MESSAGE_TYPE" VARCHAR2(100)
   )
/
CREATE TABLE  "PF_PO_TESTDATA"
   (    
    "PO_ID" NUMBER NOT NULL ENABLE,
    "SB_ACCOUNT_ID" VARCHAR2(50),
    "SB_BANK_ID" VARCHAR2(50),
    "DB_ACCOUNT_ID" VARCHAR2(50),
    "DB_BANK_ID" VARCHAR2(50),
    "PO_AMOUNT" NUMBER,
    "PO_PURPOSE" VARCHAR2(50),
     CONSTRAINT "PF_PAYMENTORDERS_PK" PRIMARY KEY ("PO_ID") ENABLE
   )
/
CREATE TABLE  "PF_PO_TESTDATA_RUN0"
   (    
    "PO_ID" NUMBER NOT NULL ENABLE,
    "SB_ACCOUNT_ID" VARCHAR2(50),
    "SB_BANK_ID" VARCHAR2(50),
    "DB_ACCOUNT_ID" VARCHAR2(50),
    "DB_BANK_ID" VARCHAR2(50),
    "PO_AMOUNT" NUMBER,
    "PO_PURPOSE" VARCHAR2(50)
   )
/
CREATE TABLE  "PF_PO_TESTDATA_RUN1"
   (    
    "PO_ID" NUMBER NOT NULL ENABLE,
    "SB_ACCOUNT_ID" VARCHAR2(50),
    "SB_BANK_ID" VARCHAR2(50),
    "DB_ACCOUNT_ID" VARCHAR2(50),
    "DB_BANK_ID" VARCHAR2(50),
    "PO_AMOUNT" NUMBER,
    "PO_PURPOSE" VARCHAR2(50)
   )
/
CREATE TABLE  "PF_PO_TESTDATA_RUN2"
   (    
    "PO_ID" NUMBER NOT NULL ENABLE,
    "SB_ACCOUNT_ID" VARCHAR2(50),
    "SB_BANK_ID" VARCHAR2(50),
    "DB_ACCOUNT_ID" VARCHAR2(50),
    "DB_BANK_ID" VARCHAR2(50),
    "PO_AMOUNT" NUMBER,
    "PO_PURPOSE" VARCHAR2(50)
   )
/
CREATE TABLE  "PF_PO_TESTDATA_RUN3"
   (    
    "PO_ID" NUMBER NOT NULL ENABLE,
    "SB_ACCOUNT_ID" VARCHAR2(50),
    "SB_BANK_ID" VARCHAR2(50),
    "DB_ACCOUNT_ID" VARCHAR2(50),
    "DB_BANK_ID" VARCHAR2(50),
    "PO_AMOUNT" NUMBER,
    "PO_PURPOSE" VARCHAR2(50)
   )
/
CREATE TABLE  "PF_TRANSACTION_HISTORY"
   (    
    "PO_ID" NUMBER NOT NULL ENABLE,
    "ACCOUNT_ID" VARCHAR2(50),
    "BANK_ID" VARCHAR2(50),
    "CUSTOMER_ID" VARCHAR2(50),
    "TRANSACTION_DATE" VARCHAR2(50),
    "TRANSACTION_TIME" VARCHAR2(50),
    "TRANSACTION_PURPOSE" VARCHAR2(50),
    "TRANSACTION_AMOUNT" NUMBER
   )
/
CREATE TABLE  "TEMP"
   (    
    "VAL" NUMBER
   )
/
CREATE OR REPLACE FUNCTION  "PF_IS_MEMBERBANK" (P_BANK_ID IN VARCHAR2)
return number
is
v_result number := 0;
begin
select count(BANK_ID) into v_result from pf_memberbanks where BANK_ID = p_BANK_ID;
return v_result;
exception when others then return 0;
end;

/

CREATE OR REPLACE PROCEDURE  "INSERT_RANDOM_PAYMENT_V0"
    (P_N in number default 1 , p_val1 in number default 10 , p_val2 in number default 1000)
is
begin
FOR REC in 1..P_N
LOOP
  insert into GENERATE_EPAY_TRANSCATIONS
  select *
  from
  (
    select rownum rn , m.BANK_ID SB, m2.BANK_ID DB, trunc(dbms_random.value * 5000) pay
    from pf_memberbanks m , pf_memberbanks m2
  )
  where pay between p_val1 and p_val2;
END LOOP;
end;
/

CREATE OR REPLACE PROCEDURE  "INSERT_RANDOM_PAYMENT"
    (P_N in number default 1 , p_start_id in number , p_message in varchar2
            , p_val1 in number default 10 , p_val2 in number default 1000)
is /* Author: Yvan Rooseleer not completely finished */
   /* Aim: Generate a number of random payment orders */
   /* p_n to have an exact number of payment orders
      p_start_id: to have a unique Payment Order ID (PO_ID)
      p_message: to define a purpose for generated payment orders
      p_val1: to indicate the lowest value for a payment
      p_val2: to indicate the highest value for a payment
      REMARK: TABLE PF_BANKACCOUNTS_INIT MUST CONTAIN ALL ACCOUNT NUMBERS
    */
begin
 insert into pf_po_testdata
 select (p_start_id + rownum) po_id
, sb_account_id , sb_bank_id
, db_account_id , db_bank_id
, po_amount , po_purpose
from
(
  select (p_start_id + rownum) po_id
, sb.account_id sb_account_id
, sb.bank_id sb_bank_id
, db.account_id db_account_id
, db.bank_id db_bank_id
, trunc(dbms_random.value(p_val1,p_val2))  po_amount
, p_message  po_purpose
  from PF_BANKACCOUNTS_INIT sb , PF_BANKACCOUNTS_INIT db
  where sb.account_id <> db.account_id
  order by dbms_random.value desc )
  where rownum <= p_N ;
end;
/

 CREATE SEQUENCE   "PF_BANKACCOUNTS_BALANCE_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 201 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "PF_LOG_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "PF_PO_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 10 NOORDER  NOCYCLE
/
CREATE OR REPLACE SYNONYM  "PF_PAYMENTORDERS_INBOX" FOR  "PF_PO_INBOX"
/
CREATE OR REPLACE SYNONYM  "PF_PAYMENTORDERS_OUTBOX" FOR  "PF_PO_OUTBOX"
/
CREATE OR REPLACE SYNONYM  "PF_PAYMENTORDERS_TESTDATA" FOR  "PF_PO_TESTDATA"
/
CREATE OR REPLACE TRIGGER  "BI_PF_PO_FAILED"
BEFORE
insert on "PF_PO_FAILED"
for each row
begin
if :new.in_date is null then
:new.in_date :=  to_char(SYSDATE, 'YYYYMMDD');
end if;
if :new.in_time is null then
:new.in_time :=  to_char(SYSDATE, 'HHMMSS');
end if;
end;
/
ALTER TRIGGER  "BI_PF_PO_FAILED" ENABLE
/

--Log
INSERT INTO PF_LOG (LOG_DATE, LOGTIME, LOG_USER, LOG_ACTION, LOG_COMMENT) VALUES (TO_CHAR(SYSDATE, 'YYYYMMDD'), TO_CHAR(SYSDATE, 'HHMISS'), 'MAN', 'Table creation.', 'Tables have been created.')

